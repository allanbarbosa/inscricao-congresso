<?php namespace Congresso\ModuloInscricao\Participante\Repositorios;

use Congresso\ModuloInscricao\Participante\Models\Participante;
use Congresso\System\Repositorio\RepositorioAbstract;

class RepositorioParticipante extends RepositorioAbstract
{
    protected $participante;


    public function __construct(Participante $participante)
    {
        $this->participante = $participante;

        parent::__construct($this->participante);
    }

    public function save(array $input)
    {
        // TODO: Change the autogenerated stub
        $this->participante->part_nome_completo         = $input['part_nome_completo'];
        $this->participante->part_nome_cracha           = $input['part_nome_cracha'];
        $this->participante->part_cpf                   = $input['part_cpf'];
        $this->participante->part_rg                    = $input['part_rg'];
        $this->participante->part_data_nascimento       = $input['part_data_nascimento'];
        $this->participante->part_endereco              = $input['part_endereco'];
        $this->participante->cod_municipios             = $input['cod_municipios'];
        $this->participante->part_telefone_residencial  = $input['part_telefone_residencial'];
        $this->participante->part_telefone_celular      = $input['part_telefone_celular'];
        $this->participante->part_email                 = $input['part_email'];
        $this->participante->cod_instituicao            = $input['cod_instituicao'];
        $this->participante->cod_sexo                   = $input['cod_sexo'];
        $this->participante->part_tipo_deficiencia      = $input['part_tipo_deficiencia'];
        $this->participante->part_motivacao             = $input['part_motivacao'];

        $this->participante->save();

        if(!$this->participante->part_id){
            throw new \AppException('O participante não pode ser salvo');
        }

        return $this->participante;
    }

    public function update(array $input)
    {
        // TODO: Change the autogenerated stub
        $this->participante = $this->participante->find($input['part_id']);

        if(!$this->participante){
            throw new \AppException('O participante solicitado não foi encontrado');
        }

        $this->participante->part_nome_completo         = $input['part_nome_completo'];
        $this->participante->part_nome_cracha           = $input['part_nome_cracha'];
        $this->participante->part_cpf                   = $input['part_cpf'];
        $this->participante->part_rg                    = $input['part_rg'];
        $this->participante->part_data_nascimento       = $input['part_data_nascimento'];
        $this->participante->part_endereco              = $input['part_endereco'];
        $this->participante->cod_municipios             = $input['cod_municipios'];
        $this->participante->part_telefone_residencial  = $input['part_telefone_residencial'];
        $this->participante->part_telefone_celular      = $input['part_telefone_celular'];
        $this->participante->part_email                 = $input['part_email'];
        $this->participante->cod_instituicao            = $input['cod_instituicao'];
        $this->participante->cod_sexo                   = $input['cod_sexo'];
        $this->participante->part_tipo_deficiencia      = $input['part_tipo_deficiencia'];
        $this->participante->part_motivacao             = $input['part_motivacao'];
        $this->participante->updated_by                 = $input['updated_by'];

        $this->participante->save();

        if(!$this->participante->part_id){
            throw new \AppException('Não foi possivel atualizar o registro');
        }

        return $this->participante;
    }

    public function getWhere(array $input)
    {
        // TODO: Implement getWhere() method.
    }

}